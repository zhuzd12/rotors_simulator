<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="enemy_mav_name" default="firefly"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <group ns="$(arg mav_name)1">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)1" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)1"/>
      <arg name="x" value="0.0"/>
      <arg name="y" value="0.0"/>
      <!-- <arg name="z" value="2.0"/> -->
    </include>

    <node name="KF_prediction_observer" pkg="mav_disturbance_observer" type="KF_prediction_observer" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <param name="prediction_name" value="$(arg enemy_mav_name)1"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg enemy_mav_name).yaml" />
    </node>

    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="ego_mav_name" value="$(arg enemy_mav_name)"/>
      <param name="enemy1_mav_name" value="$(arg enemy_mav_name)2"/>
      <param name="enemy2_mav_name" value="$(arg enemy_mav_name)3"/>
      <param name="enemy3_mav_name" value="$(arg enemy_mav_name)4"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
    <arg name="x" value="0.0"/>
    <arg name="y" value="0.0"/>
    <arg name="z" value="1.0"/>
    </node> -->


    <node name="waypoint_publisher_file" pkg="rotors_gazebo" type="waypoint_publisher_file" output="screen" args="$(find rotors_gazebo)/resource/agent1_waypoints_basic.txt"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <group ns="$(arg mav_name)2">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)2" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)2"/>
      <arg name="x" value="3.0"/>
      <arg name="y" value="0.0"/>
      <!-- <arg name="z" value="2.0"/> -->
    </include>

    <node name="KF_prediction_observer" pkg="mav_disturbance_observer" type="KF_prediction_observer" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <param name="prediction_name" value="$(arg enemy_mav_name)2"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg enemy_mav_name).yaml" />
    </node>

    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="ego_mav_name" value="$(arg enemy_mav_name)"/>
      <param name="enemy1_mav_name" value="$(arg enemy_mav_name)3"/>
      <param name="enemy2_mav_name" value="$(arg enemy_mav_name)4"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
    <arg name="x" value="3.0"/>
    <arg name="y" value="0.0"/>
    <arg name="z" value="1.0"/>
    </node> -->

    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/> -->
    <node name="waypoint_publisher_file" pkg="rotors_gazebo" type="waypoint_publisher_file" output="screen" args="$(find rotors_gazebo)/resource/agent2_waypoints_basic.txt"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <group ns="$(arg mav_name)3">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)3" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)3"/>
      <arg name="x" value="0.0"/>
      <arg name="y" value="3.0"/>
      <!-- <arg name="z" value="2.0"/> -->
    </include>

    <node name="KF_prediction_observer" pkg="mav_disturbance_observer" type="KF_prediction_observer" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <param name="prediction_name" value="$(arg enemy_mav_name)3"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg enemy_mav_name).yaml" />
    </node>

    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="ego_mav_name" value="$(arg enemy_mav_name)"/>
      <param name="enemy1_mav_name" value="$(arg enemy_mav_name)4"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
    <arg name="x" value="0.0"/>
    <arg name="y" value="3.0"/>
    <arg name="z" value="1.0"/>
    </node> -->

    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/> -->
    <node name="waypoint_publisher_file" pkg="rotors_gazebo" type="waypoint_publisher_file" output="screen" args="$(find rotors_gazebo)/resource/agent3_waypoints_basic.txt"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>


  <group ns="$(arg enemy_mav_name)4">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg enemy_mav_name)" />
      <arg name="namespace" value="$(arg enemy_mav_name)4" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)4"/>
      <arg name="x" value="3.0"/>
      <arg name="y" value="3.0"/>
      <!-- <arg name="z" value="2.0"/> -->
    </include>

    <node name="KF_prediction_observer" pkg="mav_disturbance_observer" type="KF_prediction_observer" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <param name="prediction_name" value="$(arg enemy_mav_name)4"/>
      <rosparam file="$(find mav_disturbance_observer)/resources/prediction_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg enemy_mav_name).yaml" />
    </node>

    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_linear_mpc)/resources/linear_mpc_$(arg enemy_mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg enemy_mav_name).yaml"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world" />
      <param name="ego_mav_name" value="$(arg enemy_mav_name)"/>
      <param name="enemy1_mav_name" value="$(arg mav_name)1"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg enemy_mav_name).yaml" />
    </node>

    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
    <arg name="x" value="3.0"/>
    <arg name="y" value="3.0"/>
    <arg name="z" value="1.0"/>
    </node> -->
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/> -->
    <node name="waypoint_publisher_file" pkg="rotors_gazebo" type="waypoint_publisher_file" output="screen" args="$(find rotors_gazebo)/resource/agent4_waypoints_basic.txt"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

</launch>
